{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Name","text":""},{"location":"#overview","title":"Overview","text":"<p>A brief overview of the purpose for the project, functions and features.</p> <p>This package is primarily used by:</p> <ul> <li>LINK A</li> <li>LINK B</li> <li>LINK C</li> </ul> <p>Example reference section:</p> Name Type Description Link <code>LINKA()</code> Function A link to linkA. <code>LINKB()</code> Class A link to linkB <code>LINKB()</code> Class A link to linkC."},{"location":"#techstack-overview","title":"Techstack Overview","text":"<p>What's the project written in? Any supporting frameworks? Main dependencies?</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To setup and use the project, please refer to the README.</p>"},{"location":"documentation/","title":"Documentation","text":"<p>This site uses MkDocs to build its documentation and GitHub Pages for hosting.</p>"},{"location":"documentation/#format","title":"Format","text":"<p>Documentation within this project follows the following pattern:</p> <ul> <li>A <code>README.md</code> for each component</li> <li>A <code>/docs</code> folder for the project</li> </ul> <p>Each <code>README.md</code> should contain:</p> <ul> <li>A description of what the component is/does</li> <li>A list of any prerequisites</li> <li>Setup instructions</li> <li>Execution instructions</li> <li>Deployment instructions</li> </ul> <p>The <code>/docs</code> folder should contain:</p> <ul> <li>A description of what the project is</li> <li>An overview of how the everything fits together in the project</li> <li>An explanation of the tech stack</li> <li>Details of the underlying dataset</li> </ul> <p>A majority of the information should reside within the <code>/docs</code> directory over the <code>README</code>. The <code>README</code>s in this project should be kept for concise instructions on how to use each component. Any detailed explanation should be kept within <code>/docs</code>.</p>"},{"location":"documentation/#getting-mkdocs-setup","title":"Getting MkDocs Setup","text":"<p>In order to build an MkDocs deployment or serve the documentation locally, we need to install MkDocs and its dependencies.</p> <ol> <li> <p>Navigate into the project's root directory.</p> </li> <li> <p>Install MkDocs and its dependencies.</p> <pre><code>pip install -r mkdocs_requirements.txt\n</code></pre> </li> <li> <p>You can now use MkDocs. To see a list of commands run the following:</p> <pre><code>mkdocs --help\n</code></pre> </li> </ol> <p>Please Note: Python's package manager, PIP, is required to install MkDocs. Please make sure you have Python installed beforehand.</p>"},{"location":"documentation/#updating-mkdocs-deployment","title":"Updating MkDocs Deployment","text":"<p>If changes are made within <code>/docs</code>, the GitHub Pages deployment will need to be updated. Assuming you have already installed MkDocs and Material for MkDocs, do the following:</p> <ol> <li> <p>Navigate to the projects root directory.</p> </li> <li> <p>Delete the existing <code>/mkdocs_deployment</code> directory.</p> </li> <li> <p>Build the MkDocs deployment.</p> <pre><code>mkdocs build\n</code></pre> </li> <li> <p>Rename the <code>/site</code> directory to <code>/mkdocs_deployment</code>. This allows git to track the build so GitHub Pages can redeploy it.</p> </li> <li> <p>Commit and Push changes.</p> </li> </ol> <p>Once completed, a GitHub Action will redeploy the new build to GitHub Pages.</p>"},{"location":"testing/","title":"Testing","text":"<p>This repository makes use of the <code>pytest</code> framework for testing (see documentation). This allows modules within the API toolkit to be tested. All tests can be found within <code>/tests</code>.</p>"},{"location":"testing/#test_get_codeowners_from_textpy","title":"<code>test_get_codeowners_from_text.py</code>","text":"<p>The tests within this script involve testing <code>get_codeowners_from_text()</code> against 10 different CODEOWNERS file formats. Since this is a major function within the toolkit, and has lots of dependent functions, all tests must pass to ensure the functionality is correct.</p> <p>The test uses various CODEOWNER file formats, taken from real ONS repositories. For security reasons, all team and username have been removed. The test also includes GitHub's example CODEOWNERS file which showcases all the CODEOWNERS functionality (see below).</p> <p>Example taken from GitHub Docs (link).</p> <pre><code># This is a comment.\n# Each line is a file pattern followed by one or more owners.\n\n# These owners will be the default owners for everything in\n# the repo. Unless a later match takes precedence,\n# @global-owner1 and @global-owner2 will be requested for\n# review when someone opens a pull request.\n*       @global-owner1 @global-owner2\n\n# Order is important; the last matching pattern takes the most\n# precedence. When someone opens a pull request that only\n# modifies JS files, only @js-owner and not the global\n# owner(s) will be requested for a review.\n*.js    @js-owner #This is an inline comment.\n\n# You can also use email addresses if you prefer. They'll be\n# used to look up users just like we do for commit author\n# emails.\n*.go docs@example.com\n\n# Teams can be specified as code owners as well. Teams should\n# be identified in the format @org/team-name. Teams must have\n# explicit write access to the repository. In this example,\n# the octocats team in the octo-org organization owns all .txt files.\n*.txt @octo-org/octocats\n\n# In this example, @doctocat owns any files in the build/logs\n# directory at the root of the repository and any of its\n# subdirectories.\n/build/logs/ @doctocat\n\n# The `docs/*` pattern will match files like\n# `docs/getting-started.md` but not further nested files like\n# `docs/build-app/troubleshooting.md`.\ndocs/*  docs@example.com\n\n# In this example, @octocat owns any file in an apps directory\n# anywhere in your repository.\napps/ @octocat\n\n# In this example, @doctocat owns any file in the `/docs`\n# directory in the root of your repository and any of its\n# subdirectories.\n/docs/ @doctocat\n\n# In this example, any change inside the `/scripts` directory\n# will require approval from @doctocat or @octocat.\n/scripts/ @doctocat @octocat\n\n# In this example, @octocat owns any file in a `/logs` directory such as\n# `/build/logs`, `/scripts/logs`, and `/deeply/nested/logs`. Any changes\n# in a `/logs` directory will require approval from @octocat.\n**/logs @octocat\n\n# In this example, @octocat owns any file in the `/apps`\n# directory in the root of your repository except for the `/apps/github`\n# subdirectory, as its owners are left empty.\n/apps/ @octocat\n/apps/github\n\n# In this example, @octocat owns any file in the `/apps`\n# directory in the root of your repository except for the `/apps/github`\n# subdirectory, as this subdirectory has its own owner @doctocat\n/apps/ @octocat\n/apps/github @doctocat\n</code></pre>"}]}